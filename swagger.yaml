openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0

tags:
- name: auth
  description: auth API
- name: employees
  description: employees API
- name: evaluations
  description: evaluations API
- name: questions
  description: questions API
- name: reports
  description: reports API

paths:
  # [POST] api/auth/register
  /api/auth/register:
    post:
      tags:
      - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [POST] api/auth/login
  /api/auth/login:
    post:
      tags:
      - auth
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  # [POST] api/evaluations
  /api/evaluations:
    post:
      tags:
      - evaluations
      summary: Create a new evaluation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvaluationDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

    get:
      tags:
      - evaluations
      summary: List all evaluations
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  # [GET] api/evaluations/id
  /api/evaluations/{id}:
    get:
      tags:
      - evaluations
      summary: Get evaluation details by id
      parameters:
      - name: id
        in: path
        description: Evaluation Id
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    put:
      tags:
      - evaluations
      summary: Update evaluation by id
      parameters:
      - name: id
        in: path
        description: Evaluation Id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEvaluationDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [POST] api/evaluations/id/submit
  /api/evaluations/{id}/submit:
    post:
      tags:
      - evaluations
      summary: Submit completed evaluation
      parameters:
      - name: id
        in: path
        description: Evaluation Id
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  # [POST] api/questions
  /api/questions:
    post:
      tags:
      - questions
      summary: Create a new question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

    get:
      tags:
      - questions
      summary: List all questions
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  # [PUT] api/questions/id
  /api/questions/{id}:
    put:
      tags:
      - questions
      summary: Update question by id
      parameters:
      - name: id
        in: path
        description: Question Id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuestionDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [GET] api/reports/employee/id
  /api/reports/employee/{id}:
    get:
      tags:
      - reports
      summary: Generate evaluation report for an employee
      parameters:
      - name: id
        in: path
        description: Employee Id
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  # [GET] api/reports/department/id
  /api/reports/department/{id}:
    get:
      tags:
      - reports
      summary: Generate report for a department
      parameters:
      - name: id
        in: path
        description: Department Id
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

components:
  schemas:
    CreateUserDto:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        role:
          type: string
          description: User role
          enum:
            - admin
            - manager
            - employee

    LoginUserDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password

    CreateEvaluationDto:
      type: object
      required:
        - employee
        - period
        - status
        - type
        - evaluator
      properties:
        employee:
          type: string
          description: Employee Id
        period:
          type: string
          description: Evaluation period
        status:
          type: string
          description: Evaluation status
        type:
          type: string
          description: Evaluation type
        evaluator:
          type: string
          description: Evaluator Id

    UpdateEvaluationDto:
      type: object
      properties:
        employee:
          type: string
          description: Employee Id
        period:
          type: string
          description: Evaluation period
        status:
          type: string
          description: Evaluation status
        type:
          type: string
          description: Evaluation type
        evaluator:
          type: string
          description: Evaluator Id

    CreateQuestionDto:
      type: object
      required:
        - text
        - evaluation
      properties:
        text:
          type: string
          description: Question text
        evaluation:
          type: string
          description: Evaluation Id

    UpdateQuestionDto:
      type: object
      properties:
        text:
          type: string
          description: Question text
        evaluation:
          type: string
          description: Evaluation Id
